version: "3.0"

services:
    # front-end:
    #     image: achan9528/lot-divider-client
    #     command: npm start
    #     ports:
    #         - "3000:3000"
    #     stdin_open: true
    #     tty: true
    # nginx-backend:
    #     image: achan9528/lot-divider-nginx-backend
    #     ports:
    #         - 80:80
    #     volumes:
    #         - static_volume:/home/app/web/staticfiles
    #         - media_volume:/home/app/web/mediafiles
    #     depends_on:
    #         - backend
    backend:
        image: achan9528/lot-divider-api:latest
        command: bash -c "python manage.py makemigrations; python manage.py migrate; gunicorn LotDivider.wsgi:application --bind 0.0.0.0:8000"
        environment: 
            - SECRET_KEY=${SECRET_KEY}
            - DEBUG=${DEBUG}
            - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
            - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
            - DB_ENGINE=${DB_ENGINE}
            - DB_NAME=${DB_NAME}
            - DB_HOST=${DB_HOST}
            - DB_PASSWORD=${DB_PASSWORD}
            - DB_PORT=${DB_PORT}
            - DB_USER=${DB_USER}
            - CACHE_BACKEND=${CACHE_BACKEND}
            - CACHE_LOCATION=${CACHE_LOCATION}
            - CACHE_OPTIONS_CLIENT=${CACHE_OPTIONS_CLIENT}
            - CELERY_BROKER_URL=${CELERY_BROKER_URL}
            - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
            - ALLOWED_HOSTS=${ALLOWED_HOSTS}
            - CACHE_HOST=${CACHE_HOST}
            - CACHE_PORT=${CACHE_PORT}
        # volumes:
        #     - static_volume:/home/app/web/staticfiles
        #     - media_volume:/home/app/web/mediafiles
        # logging:
        #     driver: awslogs
        #     options: 
        #         awslogs-group: lot-divider
        #         awslogs-region: us-west-2
        #         awslogs-stream-prefix: backend
        ports:
            - "80:8000"
        depends_on:
            - db
    db:
        image: postgres
        environment: 
            - POSTGRES_DB=${DB_NAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_USER=${DB_USER}
        ports:
            - "5432:5432"
    cache:
        image: redis
        ports:
            - "6379:6379"
        volumes:
            - /var/lib/lot-divider-api/cache:/data #staging and prod (assuming linux machine)
        depends_on: 
            - db
    # celery-worker:
    #     image: achan9528/lot-divider-api:latest
    #     command: celery -A LotDivider worker -l INFO
    #     environment: 
    #         - SECRET_KEY=${SECRET_KEY}
    #         - DEBUG=${DEBUG}
    #         - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    #         - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
    #         - DB_ENGINE=${DB_ENGINE}
    #         - DB_NAME=${DB_NAME}
    #         - DB_HOST=${DB_HOST}
    #         - DB_PASSWORD=${DB_PASSWORD}
    #         - DB_PORT=${DB_PORT}
    #         - DB_USER=${DB_USER}
    #         - CACHE_BACKEND=${CACHE_BACKEND}
    #         - CACHE_LOCATION=${CACHE_LOCATION}
    #         - CACHE_OPTIONS_CLIENT=${CACHE_OPTIONS_CLIENT}
    #         - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    #         - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    #     depends_on:
    #         - cache
    # celery-beat:
    #     image: achan9528/lot-divider-api:latest
    #     command: celery -A LotDivider beat
    #     environment: 
    #         - SECRET_KEY=${SECRET_KEY}
    #         - DEBUG=${DEBUG}
    #         - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    #         - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
    #         - DB_ENGINE=${DB_ENGINE}
    #         - DB_NAME=${DB_NAME}
    #         - DB_HOST=${DB_HOST}
    #         - DB_PASSWORD=${DB_PASSWORD}
    #         - DB_PORT=${DB_PORT}
    #         - DB_USER=${DB_USER}
    #         - CACHE_BACKEND=${CACHE_BACKEND}
    #         - CACHE_LOCATION=${CACHE_LOCATION}
    #         - CACHE_OPTIONS_CLIENT=${CACHE_OPTIONS_CLIENT}
    #         - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    #         - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    #     depends_on:
    #         - celery-worker
    # volumes:
    #     postgres_data:
    #     static_volume:
    #     media_volume: